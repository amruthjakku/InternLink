'use client';

import { useSession, signOut } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import { SystemMonitoring } from '../../../components/admin/SystemMonitoring';
import { AdvancedUserManagement } from '../../../components/admin/AdvancedUserManagement';
import { EnhancedUserManagement } from '../../../components/admin/EnhancedUserManagement';
import { DataIntegrityChecker } from '../../../components/admin/DataIntegrityChecker';
import { AdvancedAnalytics } from '../../../components/admin/AdvancedAnalytics';
import { AttendanceAnalytics } from '../../../components/admin/AttendanceAnalytics';
import { IPManagement } from '../../../components/admin/IPManagement';
import { CollegeManagement } from '../../../components/CollegeManagement';
import { SuperMentorManagement } from '../../../components/admin/SuperMentorManagement';
import { UserActivationManagement } from '../../../components/admin/UserActivationManagement';
import { AttendanceDebugger } from '../../../components/admin/AttendanceDebugger';
import { CohortManagementTab } from '../../../components/admin/CohortManagementTab';
import { TaskManagementTab } from '../../../components/admin/TaskManagementTab';
import { BulkImportTab } from '../../../components/admin/BulkImportTab';
import { CohortAssignmentTab } from '../../../components/admin/CohortAssignmentTab';
import { MetricCard } from '../../../components/Charts';
import { ProfileCard } from '../../../components/ProfileCard';
import { detectUserRole, detectCohortFromUsername, validateGitlabUsername, getRoleSuggestions } from '../../../utils/roleDetection';

// Enhanced Combined Tab Components
const CombinedCollegeManagement = () => {
  const [activeSubTab, setActiveSubTab] = useState('list');
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
          <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center">
            <span className="text-white text-xl">🏫</span>
          </div>
          College Management Hub
        </h2>
        <div className="flex space-x-2">
          <button
            onClick={() => setActiveSubTab('list')}
            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              activeSubTab === 'list'
                ? 'bg-purple-100 text-purple-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
            }`}
          >
            College List
          </button>
          <button
            onClick={() => setActiveSubTab('management')}
            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              activeSubTab === 'management'
                ? 'bg-purple-100 text-purple-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
            }`}
          >
            Advanced Management
          </button>
        </div>
      </div>
      
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        {activeSubTab === 'list' && (
          <div>
            <p className="text-gray-600">College list and basic operations will be displayed here.</p>
          </div>
        )}
        {activeSubTab === 'management' && (
          <CollegeManagement />
        )}
      </div>
    </div>
  );
};

const CombinedAttendanceSystem = () => {
  const [activeSubTab, setActiveSubTab] = useState('analytics');
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
          <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center">
            <span className="text-white text-xl">📊</span>
          </div>
          Attendance & IP Management Center
        </h2>
        <div className="flex space-x-2">
          <button
            onClick={() => setActiveSubTab('analytics')}
            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              activeSubTab === 'analytics'
                ? 'bg-blue-100 text-blue-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
            }`}
          >
            Analytics
          </button>
          <button
            onClick={() => setActiveSubTab('ip-management')}
            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              activeSubTab === 'ip-management'
                ? 'bg-blue-100 text-blue-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
            }`}
          >
            IP Management
          </button>
          <button
            onClick={() => setActiveSubTab('debug')}
            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              activeSubTab === 'debug'
                ? 'bg-blue-100 text-blue-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
            }`}
          >
            Debug Tools
          </button>
        </div>
      </div>
      
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        {activeSubTab === 'analytics' && <AttendanceAnalytics />}
        {activeSubTab === 'ip-management' && <IPManagement />}
        {activeSubTab === 'debug' && <AttendanceDebugger />}
      </div>
    </div>
  );
};

const CombinedUserManagement = () => {
  const [activeSubTab, setActiveSubTab] = useState('advanced');
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
          <div className="w-10 h-10 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl flex items-center justify-center">
            <span className="text-white text-xl">👥</span>
          </div>
          User Management Suite
        </h2>
        <div className="flex space-x-2">
          <button
            onClick={() => setActiveSubTab('advanced')}
            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              activeSubTab === 'advanced'
                ? 'bg-green-100 text-green-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
            }`}
          >
            Advanced Management
          </button>
          <button
            onClick={() => setActiveSubTab('enhanced')}
            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              activeSubTab === 'enhanced'
                ? 'bg-green-100 text-green-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
            }`}
          >
            Enhanced Features
          </button>
          <button
            onClick={() => setActiveSubTab('activation')}
            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              activeSubTab === 'activation'
                ? 'bg-green-100 text-green-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
            }`}
          >
            User Activation
          </button>
        </div>
      </div>
      
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        {activeSubTab === 'advanced' && <AdvancedUserManagement />}
        {activeSubTab === 'enhanced' && <EnhancedUserManagement />}
        {activeSubTab === 'activation' && <UserActivationManagement />}
      </div>
    </div>
  );
};

const CombinedCohortSystem = () => {
  const [activeSubTab, setActiveSubTab] = useState('management');
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
          <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center">
            <span className="text-white text-xl">🎯</span>
          </div>
          Cohort Management Hub
        </h2>
        <div className="flex space-x-2">
          <button
            onClick={() => setActiveSubTab('management')}
            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              activeSubTab === 'management'
                ? 'bg-orange-100 text-orange-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
            }`}
          >
            Cohort Management
          </button>
          <button
            onClick={() => setActiveSubTab('assignment')}
            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all ${
              activeSubTab === 'assignment'
                ? 'bg-orange-100 text-orange-700 shadow-sm'
                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
            }`}
          >
            Member Assignment
          </button>
        </div>
      </div>
      
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        {activeSubTab === 'management' && <CohortManagementTab />}
        {activeSubTab === 'assignment' && <CohortAssignmentTab />}
      </div>
    </div>
  );
};

export default function AdminDashboard() {
  const { data: session, status, update } = useSession();
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('overview');
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({});
  const [users, setUsers] = useState([]);
  const [colleges, setColleges] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [filteredColleges, setFilteredColleges] = useState([]);
  const [sessionRefreshed, setSessionRefreshed] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  // Define the enhanced tab configuration
  const defaultTabs = [
    { id: 'overview', name: 'Overview', icon: '📊', color: 'from-blue-500 to-purple-500', category: 'main' },
    { id: 'combined-college', name: 'College Management', icon: '🏫', color: 'from-purple-500 to-pink-500', category: 'management' },
    { id: 'combined-attendance', name: 'Attendance & IP System', icon: '📋', color: 'from-blue-500 to-cyan-500', category: 'monitoring' },
    { id: 'combined-users', name: 'User Management', icon: '👥', color: 'from-green-500 to-emerald-500', category: 'management' },
    { id: 'combined-cohorts', name: 'Cohort System', icon: '🎯', color: 'from-orange-500 to-red-500', category: 'management' },
    { id: 'system-monitoring', name: 'System Monitoring', icon: '🖥️', color: 'from-gray-500 to-slate-500', category: 'monitoring' },
    { id: 'advanced-analytics', name: 'Analytics Hub', icon: '📈', color: 'from-indigo-500 to-blue-500', category: 'analytics' },
    { id: 'task-management', name: 'Task Management', icon: '📝', color: 'from-yellow-500 to-orange-500', category: 'management' },
    { id: 'super-mentor-management', name: 'Super Mentors', icon: '👨‍🏫', color: 'from-teal-500 to-green-500', category: 'management' },
    { id: 'data-integrity', name: 'Data Integrity', icon: '🔧', color: 'from-red-500 to-pink-500', category: 'monitoring' },
    { id: 'bulk-operations', name: 'Bulk Operations', icon: '📦', color: 'from-purple-500 to-indigo-500', category: 'tools' },
    { id: 'debug-tools', name: 'Debug Tools', icon: '🔍', color: 'from-gray-600 to-gray-800', category: 'tools' }
  ];

  // Tab management with drag and drop functionality
  const [tabs, setTabs] = useState(() => {
    if (typeof window !== 'undefined') {
      const savedTabs = localStorage.getItem('adminDashboardTabs');
      return savedTabs ? JSON.parse(savedTabs) : defaultTabs;
    }
    return defaultTabs;
  });

  // Save tab configuration to localStorage
  const saveTabConfiguration = (newTabs) => {
    setTabs(newTabs);
    if (typeof window !== 'undefined') {
      localStorage.setItem('adminDashboardTabs', JSON.stringify(newTabs));
    }
  };

  // Handle drag and drop for tab reordering
  const handleOnDragEnd = (result) => {
    if (!result.destination) return;

    const items = Array.from(tabs);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    saveTabConfiguration(items);
  };

  // Reset to default tab configuration
  const resetTabConfiguration = () => {
    saveTabConfiguration(defaultTabs);
    setActiveTab('overview');
  };

  // Filter tabs based on search query
  const filteredTabs = tabs.filter(tab => 
    !tab.hidden && 
    (tab.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
     tab.category.toLowerCase().includes(searchQuery.toLowerCase()))
  );
  
  // Modal states
  const [showAddUserModal, setShowAddUserModal] = useState(false);
  const [showAddCollegeModal, setShowAddCollegeModal] = useState(false);
  const [showBulkImportModal, setShowBulkImportModal] = useState(false);
  const [showEditUserModal, setShowEditUserModal] = useState(false);
  const [showEditCollegeModal, setShowEditCollegeModal] = useState(false);
  
  // Form states
  const [newUser, setNewUser] = useState({ gitlabUsername: '', name: '', email: '', role: 'intern', college: '', cohort: '' });
  const [newCollege, setNewCollege] = useState({ name: '', description: '', location: '', website: '', mentorUsername: '' });
  const [editingUser, setEditingUser] = useState(null);
  const [editingCollege, setEditingCollege] = useState(null);
  
  // Role detection states
  const [roleSuggestions, setRoleSuggestions] = useState(null);
  const [usernameValidation, setUsernameValidation] = useState({ valid: true, message: '' });
  const [availableCohorts, setAvailableCohorts] = useState([]);
  const [autoDetectEnabled, setAutoDetectEnabled] = useState(true);
  
  // Search and filter states
  const [userSearch, setUserSearch] = useState('');
  const [userRoleFilter, setUserRoleFilter] = useState('all');
  const [collegeSearch, setCollegeSearch] = useState('');
  
  // Bulk import states
  const [bulkImportType, setBulkImportType] = useState('users');
  const [bulkImportData, setBulkImportData] = useState('');
  const [bulkImportResults, setBulkImportResults] = useState(null);

  const [recentTasks, setRecentTasks] = useState([]);

  // Refresh session data on mount to get latest role
  const refreshSession = async () => {
    try {
      const response = await fetch('/api/auth/refresh-session');
      if (response.ok) {
        const data = await response.json();
        // Force session update with fresh data
        await update({
          ...session?.user,
          role: data.user.role,
          college: data.user.college,
          assignedBy: data.user.assignedBy
        });
        setSessionRefreshed(true);
      }
    } catch (error) {
      console.error('Failed to refresh session:', error);
      setSessionRefreshed(true); // Continue with existing session
    }
  };

  useEffect(() => {
    if (status === 'loading') return;
    
    if (!session) {
      router.push('/');
      return;
    }

    // Refresh session to get latest role information
    if (!sessionRefreshed) {
      refreshSession();
      return;
    }

    // If user needs registration, redirect to onboarding (but not if they're admin)
    if (session.user.needsRegistration) {
      router.push('/onboarding');
      return;
    }
    
    // If user has pending role and is not admin, redirect 
    if (session.user.role === 'pending') {
      router.push('/pending');
      return;
    }

    if (session.user.role !== 'admin') {
      router.push('/unauthorized');
      return;
    }

    fetchDashboardData();
  }, [session, status, sessionRefreshed]);

  // Fetch available cohorts for user assignment
  const fetchAvailableCohorts = async () => {
    try {
      const response = await fetch('/api/admin/cohorts');
      if (response.ok) {
        const data = await response.json();
        setAvailableCohorts(data.cohorts || []);
      }
    } catch (error) {
      console.error('Error fetching cohorts:', error);
    }
  };

  // Handle username input changes with automatic role detection
  const handleUsernameChange = (username) => {
    setNewUser({...newUser, gitlabUsername: username});
    
    // Validate username
    const validation = validateGitlabUsername(username);
    setUsernameValidation(validation);
    
    if (validation.valid && autoDetectEnabled && username.trim()) {
      // Get role suggestions
      const suggestions = getRoleSuggestions(username);
      setRoleSuggestions(suggestions);
      
      // Auto-set role if high confidence
      if (suggestions.confidence > 0.7) {
        setNewUser(prev => ({...prev, role: suggestions.detectedRole}));
      }
      
      // If it's an intern and we have cohort suggestions, try to find matching cohort
      if (suggestions.detectedRole === 'intern' && suggestions.cohortInfo) {
        findOrSuggestCohort(suggestions.cohortInfo);
      }
    } else {
      setRoleSuggestions(null);
    }
  };

  // Find or suggest cohort based on username pattern
  const findOrSuggestCohort = async (cohortInfo) => {
    if (!availableCohorts.length) await fetchAvailableCohorts();
    
    // Try to find existing cohort that matches the pattern
    const matchingCohort = availableCohorts.find(cohort => 
      cohort.name.toLowerCase().includes(cohortInfo.identifier.toLowerCase()) ||
      cohort.name.toLowerCase().includes(cohortInfo.suggestedName.toLowerCase())
    );
    
    if (matchingCohort) {
      setNewUser(prev => ({...prev, cohort: matchingCohort._id}));
    }
  };

  // Filter users when search or filter changes
  useEffect(() => {
    if (!users || !Array.isArray(users)) {
      setFilteredUsers([]);
      return;
    }
    
    let filtered = users;
    
    if (userSearch) {
      filtered = filtered.filter(user => 
        user.name?.toLowerCase().includes(userSearch.toLowerCase()) ||
        user.gitlabUsername?.toLowerCase().includes(userSearch.toLowerCase()) ||
        user.email?.toLowerCase().includes(userSearch.toLowerCase())
      );
    }
    
    if (userRoleFilter !== 'all') {
      filtered = filtered.filter(user => user.role === userRoleFilter);
    }
    
    setFilteredUsers(filtered);
  }, [users, userSearch, userRoleFilter]);

  // Filter colleges when search changes
  useEffect(() => {
    if (!colleges || !Array.isArray(colleges)) {
      setFilteredColleges([]);
      return;
    }
    
    let filtered = colleges;
    
    if (collegeSearch) {
      filtered = filtered.filter(college => 
        college.name?.toLowerCase().includes(collegeSearch.toLowerCase()) ||
        college.location?.toLowerCase().includes(collegeSearch.toLowerCase()) ||
        college.mentorUsername?.toLowerCase().includes(collegeSearch.toLowerCase())
      );
    }
    
    setFilteredColleges(filtered);
  }, [colleges, collegeSearch]);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      
      // Fetch real data from APIs
      const [statsResponse, usersResponse, collegesResponse] = await Promise.all([
        fetch('/api/admin/stats').catch(() => ({ ok: false })),
        fetch('/api/admin/users').catch(() => ({ ok: false })),
        fetch('/api/admin/colleges').catch(() => ({ ok: false }))
      ]);

      // Handle stats
      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        setStats(statsData.stats || {
          totalUsers: 0,
          totalColleges: 0,
          totalMentors: 0,
          totalInterns: 0,
          activeUsers: 0,
          systemHealth: 100,
          avgPerformance: 0,
          tasksCompleted: 0
        });
      } else {
        setStats({
          totalUsers: 0,
          totalColleges: 0,
          totalMentors: 0,
          totalInterns: 0,
          activeUsers: 0,
          systemHealth: 100,
          avgPerformance: 0,
          tasksCompleted: 0
        });
      }

      // Handle users
      if (usersResponse.ok) {
        const usersData = await usersResponse.json();
        const usersList = usersData.users || [];
        setUsers(usersList);
        
        // Calculate user stats
        const userStats = {
          totalUsers: usersList.length,
          activeUsers: usersList.filter(user => user.isActive).length,
          inactiveUsers: usersList.filter(user => !user.isActive).length,
          totalMentors: usersList.filter(user => user.role === 'mentor' || user.role === 'super-mentor').length,
          totalInterns: usersList.filter(user => user.role === 'intern').length,
          pendingUsers: usersList.filter(user => user.role === 'pending').length
        };
        
        // Merge with existing stats
        setStats(prevStats => ({
          ...prevStats,
          ...userStats
        }));
      } else {
        setUsers([]);
      }

      // Handle colleges
      if (collegesResponse.ok) {
        const collegesData = await collegesResponse.json();
        setColleges(collegesData.colleges || []);
      } else {
        setColleges([]);
      }

    } catch (error) {
      console.error('Error fetching dashboard data:', error);
      // Set default empty states on error
      setStats({
        totalUsers: 0,
        totalColleges: 0,
        totalMentors: 0,
        totalInterns: 0,
        activeUsers: 0,
        systemHealth: 100,
        avgPerformance: 0,
        tasksCompleted: 0
      });
      setUsers([]);
      setColleges([]);
    } finally {
      setLoading(false);
    }
  };

  const handleAddUser = async (e) => {
    e.preventDefault();
    
    // Validate username first
    const validation = validateGitlabUsername(newUser.gitlabUsername);
    if (!validation.valid) {
      alert(`Invalid username: ${validation.message}`);
      return;
    }
    
    try {
      const response = await fetch('/api/admin/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...newUser,
          assignedBy: session?.user?.gitlabUsername || 'admin',
          autoDetected: roleSuggestions ? {
            originalRole: roleSuggestions.detectedRole,
            confidence: roleSuggestions.confidence,
            cohortSuggestion: roleSuggestions.cohortInfo
          } : null
        })
      });

      if (response.ok) {
        const userData = await response.json();
        
        // If user is an intern and has a cohort assigned, also assign to cohort
        if (newUser.role === 'intern' && newUser.cohort) {
          try {
            await fetch('/api/admin/assign-intern-cohort', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                internId: userData.userId,
                cohortId: newUser.cohort
              })
            });
          } catch (cohortError) {
            console.error('Error assigning cohort:', cohortError);
            // Don't fail the user creation, just log the cohort assignment failure
          }
        }
        
        setShowAddUserModal(false);
        setNewUser({ gitlabUsername: '', name: '', email: '', role: 'intern', college: '', cohort: '' });
        setRoleSuggestions(null);
        setUsernameValidation({ valid: true, message: '' });
        fetchDashboardData();
        alert('User added successfully!');
      } else {
        const error = await response.json();
        alert(`Error: ${error.message}`);
      }
    } catch (error) {
      console.error('Error adding user:', error);
      alert('Failed to add user');
    }
  };

  const handleAddCollege = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/admin/colleges', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newCollege)
      });

      if (response.ok) {
        setShowAddCollegeModal(false);
        setNewCollege({ name: '', description: '', location: '', website: '', mentorUsername: '' });
        fetchDashboardData();
        alert('College added successfully!');
      } else {
        const error = await response.json();
        alert(`Error: ${error.message}`);
      }
    } catch (error) {
      console.error('Error adding college:', error);
      alert('Failed to add college');
    }
  };

  const handleEditUser = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch(`/api/admin/users/${editingUser._id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(editingUser)
      });

      if (response.ok) {
        setShowEditUserModal(false);
        setEditingUser(null);
        fetchDashboardData();
        alert('User updated successfully!');
      } else {
        const error = await response.json();
        alert(`Error: ${error.message}`);
      }
    } catch (error) {
      console.error('Error updating user:', error);
      alert('Failed to update user');
    }
  };

  const handleEditCollege = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch(`/api/admin/colleges/${editingCollege._id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(editingCollege)
      });

      if (response.ok) {
        setShowEditCollegeModal(false);
        setEditingCollege(null);
        fetchDashboardData();
        alert('College updated successfully!');
      } else {
        const error = await response.json();
        alert(`Error: ${error.message}`);
      }
    } catch (error) {
      console.error('Error updating college:', error);
      alert('Failed to update college');
    }
  };

  const handleDeleteUser = async (userId) => {
    if (!confirm('Are you sure you want to delete this user?')) return;

    try {
      const response = await fetch(`/api/admin/users/${userId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        fetchDashboardData();
        alert('User deleted successfully!');
      } else {
        alert('Failed to delete user');
      }
    } catch (error) {
      console.error('Error deleting user:', error);
      alert('Failed to delete user');
    }
  };

  const handleDeleteCollege = async (collegeId) => {
    if (!confirm('Are you sure you want to delete this college? This will affect all associated users.')) return;

    try {
      const response = await fetch(`/api/admin/colleges/${collegeId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        fetchDashboardData();
        alert('College deleted successfully!');
      } else {
        const error = await response.json();
        alert(`Error: ${error.message}`);
      }
    } catch (error) {
      console.error('Error deleting college:', error);
      alert('Failed to delete college');
    }
  };

  const handleBulkImport = async (e) => {
    e.preventDefault();
    try {
      let data;
      try {
        data = JSON.parse(bulkImportData);
      } catch (parseError) {
        alert('Invalid JSON format. Please check your data.');
        return;
      }

      const response = await fetch(`/api/admin/bulk-import`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          type: bulkImportType,
          data: data
        })
      });

      const result = await response.json();
      setBulkImportResults(result);
      
      if (response.ok) {
        fetchDashboardData();
      }
    } catch (error) {
      console.error('Error with bulk import:', error);
      alert('Failed to process bulk import');
    }
  };

  // Debug functions
  const debugUsers = async () => {
    try {
      console.log('🔍 Running debug users...');
      const response = await fetch('/api/debug/users');
      const data = await response.json();
      console.log('🔍 Debug Users Result:', data);
      alert(`Debug complete! Check console. Found ${data.totalUsers} users, ${data.activeUsers} active`);
    } catch (error) {
      console.error('❌ Debug error:', error);
      alert('Debug failed. Check console for errors.');
    }
  };

  const testUserLookup = async () => {
    const username = prompt('Enter GitLab username to test:');
    if (!username) return;
    
    try {
      console.log('🔍 Testing username lookup for:', username);
      const response = await fetch('/api/debug/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username })
      });
      const data = await response.json();
      console.log('🔍 Username Test Result:', data);
      alert(`Test complete! Check console for detailed results.`);
    } catch (error) {
      console.error('❌ Username test error:', error);
      alert('Username test failed. Check console for errors.');
    }
  };

  const exportData = async (type) => {
    try {
      const response = await fetch(`/api/admin/export?type=${type}`);
      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${type}_export_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } else {
        alert('Failed to export data');
      }
    } catch (error) {
      console.error('Error exporting data:', error);
      alert('Failed to export data');
    }
  };

  // Fetch recent tasks for dashboard
  const fetchRecentTasks = async () => {
    try {
      const response = await fetch('/api/admin/tasks');
      if (response.ok) {
        const data = await response.json();
        setRecentTasks((data.tasks || []).slice(0, 5));
      } else {
        setRecentTasks([]);
      }
    } catch (error) {
      setRecentTasks([]);
    }
  };

  useEffect(() => {
    fetchRecentTasks();
  }, []);

  if (loading) {
    return (
      <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gradient-to-br from-gray-50 to-gray-100'} flex items-center justify-center transition-colors duration-300`}>
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className={`text-lg font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>Loading Dashboard...</p>
          <p className={`text-sm mt-2 ${darkMode ? 'text-gray-500' : 'text-gray-500'}`}>Setting up your admin experience</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gradient-to-br from-gray-50 to-gray-100'} transition-colors duration-300`}>
      {/* Enhanced Header */}
      <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white/80 backdrop-blur-md border-gray-200'} shadow-lg border-b sticky top-0 z-40`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl flex items-center justify-center shadow-lg">
                  <span className="text-white text-xl font-bold">A</span>
                </div>
                <div>
                  <h1 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    Admin Dashboard
                  </h1>
                  <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                    InternLink Management Center
                  </p>
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              {/* Search Bar */}
              <div className="relative">
                <input
                  type="text"
                  placeholder="Search tabs..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className={`pl-10 pr-4 py-2 rounded-lg border ${
                    darkMode 
                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                      : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                  } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all`}
                />
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span className="text-gray-400">🔍</span>
                </div>
              </div>

              {/* Dark Mode Toggle */}
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`p-2 rounded-lg transition-all duration-200 ${
                  darkMode 
                    ? 'bg-gray-700 text-yellow-400 hover:bg-gray-600' 
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {darkMode ? '☀️' : '🌙'}
              </button>

              {/* User Profile */}
              <div className="flex items-center space-x-3">
                <img 
                  src={session?.user?.image || session?.user?.profileImage} 
                  alt={session?.user?.name}
                  className="w-10 h-10 rounded-full ring-2 ring-blue-500/20 shadow-lg"
                />
                <div className="text-right">
                  <p className={`text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    {session?.user?.name}
                  </p>
                  <span className="px-2 py-1 text-xs font-medium bg-gradient-to-r from-red-500 to-pink-500 text-white rounded-full shadow-sm">
                    Admin
                  </span>
                </div>
              </div>

              <button
                onClick={() => signOut()}
                className={`px-3 py-2 text-sm font-medium rounded-lg transition-all ${
                  darkMode 
                    ? 'text-gray-300 hover:text-white hover:bg-gray-700' 
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                }`}
              >
                Sign Out
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Navigation with Drag & Drop */}
      <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white/90 backdrop-blur-md border-gray-200'} border-b sticky top-20 z-30`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <DragDropContext onDragEnd={handleOnDragEnd}>
              <Droppable droppableId="tabs" direction="horizontal">
                {(provided) => (
                  <div
                    {...provided.droppableProps}
                    ref={provided.innerRef}
                    className="flex space-x-2 overflow-x-auto scrollbar-hide flex-1 mr-4"
                  >
                    {filteredTabs.map((tab, index) => (
                      <Draggable key={tab.id} draggableId={tab.id} index={index}>
                        {(provided, snapshot) => (
                          <button
                            ref={provided.innerRef}
                            {...provided.draggableProps}
                            {...provided.dragHandleProps}
                            onClick={() => setActiveTab(tab.id)}
                            className={`flex-shrink-0 px-4 py-3 rounded-xl font-medium text-sm transition-all duration-200 transform ${
                              activeTab === tab.id
                                ? `bg-gradient-to-r ${tab.color} text-white shadow-lg scale-105`
                                : darkMode 
                                  ? 'text-gray-300 hover:text-white hover:bg-gray-700'
                                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                            } ${snapshot.isDragging ? 'rotate-3 shadow-2xl z-50' : ''}`}
                          >
                            <div className="flex items-center space-x-2">
                              <span className="text-lg">{tab.icon}</span>
                              <span className="whitespace-nowrap">{tab.name}</span>
                            </div>
                          </button>
                        )}
                      </Draggable>
                    ))}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </DragDropContext>

            {/* Tab Configuration */}
            <div className="flex items-center space-x-2">
              <button
                onClick={resetTabConfiguration}
                className={`px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                  darkMode 
                    ? 'text-gray-300 hover:text-white hover:bg-gray-700' 
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                }`}
                title="Reset tab order"
              >
                🔄
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Enhanced Overview Tab */}
        {activeTab === 'overview' && (
          <div className="space-y-8">
            <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
              <div className="lg:col-span-3 space-y-8">
                <div className="flex items-center justify-between">
                  <h2 className={`text-3xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'} flex items-center gap-3`}>
                    <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl flex items-center justify-center shadow-lg">
                      <span className="text-white text-2xl">📊</span>
                    </div>
                    System Overview
                  </h2>
                  <div className={`px-4 py-2 rounded-xl ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-sm border ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                    <span className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                      Last updated: {new Date().toLocaleTimeString()}
                    </span>
                  </div>
                </div>
            
                {/* Enhanced Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <MetricCard
                    title="Total Users"
                    value={stats.totalUsers || 0}
                    change={5.2}
                    icon="👥"
                    color="blue"
                  />
                  <MetricCard
                    title="Active Users"
                    value={stats.activeUsers || 0}
                    change={3.1}
                    icon="✅"
                    color="green"
                  />
                  <MetricCard
                    title="System Health"
                    value={`${stats.systemHealth || 0}%`}
                    change={0.5}
                    icon="🖥️"
                    color="purple"
                  />
                  <MetricCard
                    title="Total Mentors"
                    value={stats.totalMentors || 0}
                    change={2.1}
                    icon="👨‍🏫"
                    color="orange"
                  />
                  <MetricCard
                    title="Total Interns"
                    value={stats.totalInterns || 0}
                    change={4.3}
                    icon="🎓"
                    color="teal"
                  />
                  <MetricCard
                    title="Avg Performance"
                    value={`${stats.avgPerformance || 0}%`}
                    change={2.3}
                    icon="📈"
                    color="indigo"
                  />
                </div>

                {/* Quick Actions with modern design */}
                <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-sm border ${darkMode ? 'border-gray-700' : 'border-gray-200'} p-8`}>
                  <h3 className={`text-xl font-bold mb-6 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    Quick Actions
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    {[
                      { icon: '👤', title: 'Add User', subtitle: 'Create new user account', color: 'from-blue-500 to-cyan-500', action: () => setActiveTab('combined-users') },
                      { icon: '🏫', title: 'Add College', subtitle: 'Register new institution', color: 'from-purple-500 to-pink-500', action: () => setActiveTab('combined-college') },
                      { icon: '📦', title: 'Bulk Import', subtitle: 'Import multiple records', color: 'from-green-500 to-emerald-500', action: () => setActiveTab('bulk-operations') },
                      { icon: '📊', title: 'View Analytics', subtitle: 'Detailed system insights', color: 'from-orange-500 to-red-500', action: () => setActiveTab('advanced-analytics') }
                    ].map((action, index) => (
                      <button
                        key={index}
                        onClick={action.action}
                        className={`group p-6 rounded-xl border-2 border-dashed ${
                          darkMode ? 'border-gray-600 hover:border-gray-500' : 'border-gray-300 hover:border-gray-400'
                        } transition-all duration-200 hover:scale-105 hover:shadow-lg`}
                      >
                        <div className="text-center">
                          <div className={`w-12 h-12 bg-gradient-to-r ${action.color} rounded-xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform shadow-lg`}>
                            <span className="text-white text-2xl">{action.icon}</span>
                          </div>
                          <h4 className={`font-semibold mb-1 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                            {action.title}
                          </h4>
                          <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                            {action.subtitle}
                          </p>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>

            {/* Recent Users */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold">Recent Users</h3>
                <button
                  onClick={() => setActiveTab('user-management')}
                  className="text-sm text-blue-600 hover:text-blue-800"
                >
                  View All
                </button>
              </div>
              <div className="space-y-3">
                {users.slice(0, 5).map((user) => (
                  <div key={user._id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm font-bold">
                        {user.name?.charAt(0)?.toUpperCase() || 'U'}
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-900">{user.name}</p>
                        <p className="text-xs text-gray-500">{user.email}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                        user.role === 'admin' ? 'bg-red-100 text-red-800' :
                        user.role === 'mentor' ? 'bg-blue-100 text-blue-800' :
                        'bg-green-100 text-green-800'
                      }`}>
                        {user.role}
                      </span>
                      <p className="text-xs text-gray-500 mt-1">
                        {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}
                      </p>
                    </div>
                  </div>
                ))}
                {users.length === 0 && (
                  <div className="text-center py-4 text-gray-500">
                    No users found. Add some users to get started.
                  </div>
                )}
              </div>
            </div>

            {/* Recent Colleges */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold">Recent Colleges</h3>
                <button
                  onClick={() => setActiveTab('colleges')}
                  className="text-sm text-blue-600 hover:text-blue-800"
                >
                  View All
                </button>
              </div>
              <div className="space-y-3">
                {colleges.slice(0, 3).map((college, index) => (
                  <div key={college?._id || `college-${index}`} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm font-bold">
                        🏫
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-900">{college?.name || 'Unknown College'}</p>
                        <p className="text-xs text-gray-500">{college?.location || 'No location'}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-xs text-gray-500">
                        Mentor: {college.mentorUsername || 'Unassigned'}
                      </p>
                      <p className="text-xs text-gray-500">
                        {college.createdAt ? new Date(college.createdAt).toLocaleDateString() : 'N/A'}
                      </p>
                    </div>
                  </div>
                ))}
                {colleges.length === 0 && (
                  <div className="text-center py-4 text-gray-500">
                    No colleges found. Add some colleges to get started.
                  </div>
                )}
              </div>
            </div>

            {/* Recent Tasks */}
            <div className="mt-8">
              <h3 className="text-lg font-semibold mb-4">Recent Tasks</h3>
              {recentTasks.length === 0 ? (
                <div className="text-gray-500">No tasks found.</div>
              ) : (
                <div className="bg-white rounded-lg shadow divide-y divide-gray-100">
                  {recentTasks.map((task) => (
                    <div key={task._id} className="p-4 flex items-center justify-between">
                      <div>
                        <div className="font-medium text-gray-900">{task.title}</div>
                        <div className="text-sm text-gray-500">
                          Cohort: {task.cohortId?.name || 'Unassigned'}
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        <div className="text-xs text-gray-500">
                          Due: {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'N/A'}
                        </div>
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          task.status === 'active' ? 'bg-green-100 text-green-800' :
                          task.status === 'completed' ? 'bg-blue-100 text-blue-800' :
                          task.status === 'draft' ? 'bg-gray-100 text-gray-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          {task.status}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
              </div>
              
              {/* Enhanced Sidebar */}
              <div className="lg:col-span-1 space-y-6">
                <ProfileCard user={session?.user} showMilestones={true} />
                
                {/* System Status Card */}
                <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-sm border ${darkMode ? 'border-gray-700' : 'border-gray-200'} p-6`}>
                  <h3 className={`text-lg font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    System Status
                  </h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Database</span>
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span className="text-sm font-medium text-green-600">Healthy</span>
                      </div>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>API Server</span>
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span className="text-sm font-medium text-green-600">Online</span>
                      </div>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Storage</span>
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                        <span className="text-sm font-medium text-yellow-600">75% Full</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Quick Stats */}
                <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-sm border ${darkMode ? 'border-gray-700' : 'border-gray-200'} p-6`}>
                  <h3 className={`text-lg font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    Today's Activity
                  </h3>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>New Registrations</span>
                      <span className={`text-sm font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>12</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Active Sessions</span>
                      <span className={`text-sm font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>85</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Tasks Completed</span>
                      <span className={`text-sm font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>247</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Combined College Management Tab */}
        {activeTab === 'combined-college' && <CombinedCollegeManagement />}

        {/* Combined Attendance System Tab */}
        {activeTab === 'combined-attendance' && <CombinedAttendanceSystem />}

        {/* Combined User Management Tab */}
        {activeTab === 'combined-users' && <CombinedUserManagement />}

        {/* Combined Cohort System Tab */}
        {activeTab === 'combined-cohorts' && <CombinedCohortSystem />}

        {/* System Monitoring Tab */}
        {activeTab === 'system-monitoring' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-sm border ${darkMode ? 'border-gray-700' : 'border-gray-200'} p-8`}>
            <SystemMonitoring />
          </div>
        )}

        {/* Advanced Analytics Tab */}
        {activeTab === 'advanced-analytics' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-sm border ${darkMode ? 'border-gray-700' : 'border-gray-200'} p-8`}>
            <AdvancedAnalytics />
          </div>
        )}

        {/* Task Management Tab */}
        {activeTab === 'task-management' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-sm border ${darkMode ? 'border-gray-700' : 'border-gray-200'} p-8`}>
            <TaskManagementTab />
          </div>
        )}

        {/* Super Mentor Management Tab */}
        {activeTab === 'super-mentor-management' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-sm border ${darkMode ? 'border-gray-700' : 'border-gray-200'} p-8`}>
            <SuperMentorManagement />
          </div>
        )}

        {/* Data Integrity Tab */}
        {activeTab === 'data-integrity' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-sm border ${darkMode ? 'border-gray-700' : 'border-gray-200'} p-8`}>
            <DataIntegrityChecker />
          </div>
        )}

        {/* Bulk Operations Tab */}
        {activeTab === 'bulk-operations' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-2xl shadow-sm border ${darkMode ? 'border-gray-700' : 'border-gray-200'} p-8`}>
            <BulkImportTab />
          </div>
        )}

      </div>
    </div>
  );
}
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-semibold text-gray-900">College Management</h2>
              <button
                onClick={() => setShowAddCollegeModal(true)}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                Add College
              </button>
            </div>

            {/* Search and Filter */}
            <div className="bg-white p-4 rounded-lg shadow">
              <input
                type="text"
                placeholder="Search colleges..."
                value={collegeSearch}
                onChange={(e) => setCollegeSearch(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Colleges Table */}
            <div className="bg-white shadow overflow-hidden sm:rounded-lg">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      College
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Location
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Mentor
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Created
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredColleges.map((college, index) => (
                    <tr key={college?._id || `college-${index}`}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{college?.name || 'Unknown College'}</div>
                          <div className="text-sm text-gray-500">{college?.description || 'No description'}</div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {college?.location || 'No location'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {college?.mentorUsername || 'No mentor'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {college?.createdAt ? new Date(college.createdAt).toLocaleDateString() : 'Unknown'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button
                          onClick={() => {
                            setEditingCollege(college);
                            setShowEditCollegeModal(true);
                          }}
                          className="text-indigo-600 hover:text-indigo-900 mr-3"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleDeleteCollege(college._id)}
                          className="text-red-600 hover:text-red-900"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* College Management Tab */}
        {activeTab === 'college-management' && (
          <div className="p-8">
            <h2 className="text-2xl font-bold mb-4">College Management</h2>
            <p>College management functionality will be available here.</p>
          </div>
        )}

        {/* Bulk Operations Tab */}
        {activeTab === 'bulk-operations' && (
          <BulkImportTab />
        )}

        {/* Legacy Bulk Operations Tab */}
        {activeTab === 'legacy-bulk-operations' && (
          <div className="space-y-6">
            <h2 className="text-xl font-semibold text-gray-900">Bulk Operations</h2>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Bulk Import */}
              <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Bulk Import</h3>
                <form onSubmit={handleBulkImport}>
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Import Type
                    </label>
                    <select
                      value={bulkImportType}
                      onChange={(e) => setBulkImportType(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="users">Users</option>
                      <option value="colleges">Colleges</option>
                    </select>
                  </div>
                  
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      JSON Data
                    </label>
                    <textarea
                      value={bulkImportData}
                      onChange={(e) => setBulkImportData(e.target.value)}
                      rows={10}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Paste your JSON data here..."
                    />
                  </div>
                  
                  <button
                    type="submit"
                    className="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                  >
                    Import Data
                  </button>
                </form>
                
                {bulkImportResults && (
                  <div className="mt-4 p-4 bg-gray-50 rounded-md">
                    <h4 className="font-medium text-gray-900">Import Results:</h4>
                    <pre className="text-sm text-gray-600 mt-2">
                      {JSON.stringify(bulkImportResults, null, 2)}
                    </pre>
                  </div>
                )}
              </div>

              {/* Bulk Export */}
              <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Bulk Export</h3>
                <div className="space-y-3">
                  <button
                    onClick={() => exportData('users')}
                    className="w-full px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                  >
                    Export Users
                  </button>
                  <button
                    onClick={() => exportData('colleges')}
                    className="w-full px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                  >
                    Export Colleges
                  </button>
                  <button
                    onClick={() => exportData('all')}
                    className="w-full px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                  >
                    Export All Data
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Analytics Tab */}
        {activeTab === 'analytics' && <AdvancedAnalytics />}
      </div>

      {/* Add User Modal */}
      {showAddUserModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-lg">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">Add New User</h3>
              <div className="flex items-center">
                <label className="text-sm text-gray-600 mr-2">Auto-detect</label>
                <input
                  type="checkbox"
                  checked={autoDetectEnabled}
                  onChange={(e) => setAutoDetectEnabled(e.target.checked)}
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500"
                />
              </div>
            </div>
            <form onSubmit={handleAddUser} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  GitLab Username <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={newUser.gitlabUsername}
                  onChange={(e) => handleUsernameChange(e.target.value)}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                    usernameValidation.valid 
                      ? 'border-gray-300 focus:ring-blue-500' 
                      : 'border-red-300 focus:ring-red-500'
                  }`}
                  required
                  placeholder="Enter GitLab username"
                />
                {!usernameValidation.valid && (
                  <p className="text-sm text-red-600 mt-1">{usernameValidation.message}</p>
                )}
                {roleSuggestions && (
                  <div className="mt-2 p-3 bg-blue-50 rounded-md">
                    <p className="text-sm font-medium text-blue-800">Auto-Detection Results:</p>
                    <div className="text-sm text-blue-700 mt-1">
                      <p>• Detected role: <span className="font-medium">{roleSuggestions.detectedRole}</span> 
                         (Confidence: {Math.round(roleSuggestions.confidence * 100)}%)</p>
                      {roleSuggestions.cohortInfo && (
                        <p>• Suggested cohort: <span className="font-medium">{roleSuggestions.cohortInfo.suggestedName}</span></p>
                      )}
                    </div>
                  </div>
                )}
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Full Name (Optional)
                </label>
                <input
                  type="text"
                  value={newUser.name}
                  onChange={(e) => setNewUser({...newUser, name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter full name"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email (Optional)
                </label>
                <input
                  type="email"
                  value={newUser.email}
                  onChange={(e) => setNewUser({...newUser, email: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter email address"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Role <span className="text-red-500">*</span>
                  {roleSuggestions && autoDetectEnabled && (
                    <span className="text-sm text-blue-600 ml-2">(Auto-detected)</span>
                  )}
                </label>
                <select
                  value={newUser.role}
                  onChange={(e) => setNewUser({...newUser, role: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                >
                  <option value="intern">Intern</option>
                  <option value="mentor">Mentor</option>
                  <option value="super-mentor">Super-Mentor</option>
                  <option value="admin">Admin</option>
                </select>
              </div>
              
              {newUser.role === 'intern' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Cohort (Optional)
                    {roleSuggestions?.cohortInfo && (
                      <span className="text-sm text-blue-600 ml-2">(Auto-suggested)</span>
                    )}
                  </label>
                  <select
                    value={newUser.cohort}
                    onChange={(e) => setNewUser({...newUser, cohort: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    onFocus={fetchAvailableCohorts}
                  >
                    <option value="">Select Cohort (Optional)</option>
                    {availableCohorts.map((cohort) => (
                      <option key={cohort._id} value={cohort._id}>
                        {cohort.name} ({cohort.currentInterns || 0}/{cohort.maxInterns})
                      </option>
                    ))}
                  </select>
                  {roleSuggestions?.cohortInfo && !newUser.cohort && (
                    <p className="text-sm text-blue-600 mt-1">
                      💡 Suggestion: Create or assign to "{roleSuggestions.cohortInfo.suggestedName}"
                    </p>
                  )}
                </div>
              )}
              
              {(newUser.role === 'intern' || newUser.role === 'mentor' || newUser.role === 'super-mentor') && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    College
                  </label>
                  <select
                    value={newUser.college}
                    onChange={(e) => setNewUser({...newUser, college: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required={newUser.role === 'intern' || newUser.role === 'mentor' || newUser.role === 'super-mentor'}
                  >
                    <option value="">Select College</option>
                    {colleges.map((college, index) => (
                      <option key={college?._id || `college-new-${index}`} value={college?._id || ''}>
                        {college?.name || 'Unknown College'}
                      </option>
                    ))}
                  </select>
                </div>
              )}
              
              <div className="flex space-x-3 pt-4">
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  Add User
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setShowAddUserModal(false);
                    setNewUser({ gitlabUsername: '', name: '', email: '', role: 'intern', college: '', cohort: '' });
                    setRoleSuggestions(null);
                    setUsernameValidation({ valid: true, message: '' });
                    setAvailableCohorts([]);
                  }}
                  className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Add College Modal */}
      {showAddCollegeModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Add New College</h3>
            <form onSubmit={handleAddCollege} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  College Name
                </label>
                <input
                  type="text"
                  value={newCollege.name}
                  onChange={(e) => setNewCollege({...newCollege, name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <textarea
                  value={newCollege.description}
                  onChange={(e) => setNewCollege({...newCollege, description: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows={3}
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Location
                </label>
                <input
                  type="text"
                  value={newCollege.location}
                  onChange={(e) => setNewCollege({...newCollege, location: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Website (Optional)
                </label>
                <input
                  type="url"
                  value={newCollege.website}
                  onChange={(e) => setNewCollege({...newCollege, website: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Super-mentor Username (Optional)
                </label>
                <input
                  type="text"
                  value={newCollege.mentorUsername}
                  onChange={(e) => setNewCollege({...newCollege, mentorUsername: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="GitLab username of assigned super-mentor"
                />
              </div>
              
              <div className="flex space-x-3 pt-4">
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  Add College
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setShowAddCollegeModal(false);
                    setNewCollege({ name: '', description: '', location: '', website: '', mentorUsername: '' });
                  }}
                  className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Edit User Modal */}
      {showEditUserModal && editingUser && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Edit User</h3>
            <form onSubmit={handleEditUser} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Full Name
                </label>
                <input
                  type="text"
                  value={editingUser.name}
                  onChange={(e) => setEditingUser({...editingUser, name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email
                </label>
                <input
                  type="email"
                  value={editingUser.email}
                  onChange={(e) => setEditingUser({...editingUser, email: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Role
                </label>
                <select
                  value={editingUser.role}
                  onChange={(e) => setEditingUser({...editingUser, role: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                >
                  <option value="intern">Intern</option>
                  <option value="mentor">Mentor</option>
                  <option value="super-mentor">Super-Mentor</option>
                  <option value="admin">Admin</option>
                </select>
              </div>
              
              {(editingUser.role === 'intern' || editingUser.role === 'mentor' || editingUser.role === 'super-mentor') && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    College
                  </label>
                  <select
                    value={editingUser.college}
                    onChange={(e) => setEditingUser({...editingUser, college: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required={editingUser.role === 'intern' || editingUser.role === 'mentor' || editingUser.role === 'super-mentor'}
                  >
                    <option value="">Select College</option>
                    {colleges.map((college, index) => (
                      <option key={college?._id || `college-edit-${index}`} value={college?._id || ''}>
                        {college?.name || 'Unknown College'}
                      </option>
                    ))}
                  </select>
                </div>
              )}
              
              <div className="flex space-x-3 pt-4">
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  Update User
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setShowEditUserModal(false);
                    setEditingUser(null);
                  }}
                  className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Edit College Modal */}
      {showEditCollegeModal && editingCollege && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Edit College</h3>
            <form onSubmit={handleEditCollege} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  College Name
                </label>
                <input
                  type="text"
                  value={editingCollege.name}
                  onChange={(e) => setEditingCollege({...editingCollege, name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <textarea
                  value={editingCollege.description}
                  onChange={(e) => setEditingCollege({...editingCollege, description: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows={3}
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Location
                </label>
                <input
                  type="text"
                  value={editingCollege.location}
                  onChange={(e) => setEditingCollege({...editingCollege, location: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Website
                </label>
                <input
                  type="url"
                  value={editingCollege.website}
                  onChange={(e) => setEditingCollege({...editingCollege, website: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Super-mentor Username
                </label>
                <input
                  type="text"
                  value={editingCollege.mentorUsername}
                  onChange={(e) => setEditingCollege({...editingCollege, mentorUsername: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div className="flex space-x-3 pt-4">
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  Update College
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setShowEditCollegeModal(false);
                    setEditingCollege(null);
                  }}
                  className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Bulk Import Modal */}
      {showBulkImportModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Bulk Import Data</h3>
            <form onSubmit={handleBulkImport} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Import Type
                </label>
                <select
                  value={bulkImportType}
                  onChange={(e) => setBulkImportType(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="users">Users</option>
                  <option value="colleges">Colleges</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  JSON Data
                </label>
                <textarea
                  value={bulkImportData}
                  onChange={(e) => setBulkImportData(e.target.value)}
                  rows={12}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-sm"
                  placeholder={bulkImportType === 'users' ? 
                    `[
  {
    "gitlabUsername": "john.doe",
    "name": "John Doe",
    "email": "john@example.com",
    "role": "intern",
    "college": "University Name"
  }
]` : 
                    `[
  {
    "name": "University Name",
    "description": "A great university",
    "location": "City, State",
    "website": "https://university.edu",
    "mentorUsername": "mentor.username"
  }
]`}
                />
              </div>
              
              <div className="flex space-x-3 pt-4">
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  Import Data
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setShowBulkImportModal(false);
                    setBulkImportData('');
                    setBulkImportResults(null);
                  }}
                  className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
                >
                  Cancel
                </button>
              </div>
            </form>
            
            {bulkImportResults && (
              <div className="mt-6 p-4 bg-gray-50 rounded-md">
                <h4 className="font-medium text-gray-900 mb-2">Import Results:</h4>
                <div className="text-sm space-y-1">
                  <p className="text-green-600">✅ Successful: {bulkImportResults.successful}</p>
                  <p className="text-red-600">❌ Failed: {bulkImportResults.failed}</p>
                  {bulkImportResults.errors && bulkImportResults.errors.length > 0 && (
                    <div className="mt-2">
                      <p className="font-medium text-gray-700">Errors:</p>
                      <ul className="list-disc list-inside text-red-600 space-y-1">
                        {bulkImportResults.errors.map((error, index) => (
                          <li key={index}>{error}</li>
                        ))}
                      </ul>
                      {bulkImportResults.totalErrors > bulkImportResults.errors.length && (
                        <p className="text-gray-600 mt-1">
                          ... and {bulkImportResults.totalErrors - bulkImportResults.errors.length} more errors
                        </p>
                      )}
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}